
# is the url for retrieving the openid configuration - normally the <server>/auth/realm/<realm_name>
discovery-url: http://keycloak.keycloak.svc:8180/auth/realms/greetingservice
# skip the tls verification of openid provider
skip-openid-provider-tls-verify: true
# the client id for the 'client' application
client-id: greetingservice-client
# the secret associated to the 'client' application - note the client_secret is optional, required for
# oauth2 access_type=confidential i.e. the client is being verified
client-secret: 57803581-1d67-4851-9646-59b73018b6b4
# the interface definition you wish the proxy to listen, all interfaces is specified as ':<port>'
listen: 127.0.0.1:3000
# whether to request offline access and use a refresh token
enable-refresh-tokens: true
# log all incoming requests
enable-logging: true
# should the access token be encrypted - you need an encryption-key if 'true'
enable-encrypted-token: false
# do not redirect the request, simple 307 it
#no-redirects: true
# the redirection url, essentially the site url, note: /oauth/callback is added at the end
#redirection-url: http://127.0.0.3000
# the encryption key used to encode the session state
encryption-key: HA6KnOVUOK2nSvVa
# the name of the access cookie, defaults to kc-access
#cookie-access-name: kc-access
# the name of the refresh cookie, default to kc-state
#cookie-refresh-name: kc-state
# the upstream endpoint which we should proxy request
upstream-url: http://greetingservice:8080
# upstream-keepalives specified wheather you want keepalive on the upstream endpoint
#upstream-keepalives: true
# skip the tls verification of the upstream url
#skip-upstream-tls-verify: true|false
# additional scopes to add to the default (openid+email+profile)
scopes: [openid]
# enables more extra security features
#enable-security-filter: true
# headers permits you to inject custom headers into all requests
#headers:
#  myheader_name: my_header_value
# a map of claims that MUST exist in the token presented and the value it MUST match
# So for example, you could match the audience or the issuer or some custom attribute
#match-claims:
#  aud: openvpn
#  iss: https://keycloak.example.com/auth/realms/commons
# a list of claims to inject into the authentication headers i.e. given_name -> X-Auth-Given-Name
#add-claims:
#- given_name
#- family_name
#- name
# a collection of resources i.e. urls that you wish to protect
resources:
- uri: /*
  # the methods on this url that should be protected, if missing, we assuming all
  methods:
  - GET
  # a list of roles the user must have in order to accces urls under the above
  roles:
    - greet

# an array of origins (Access-Control-Allow-Origin)
#cors-origins: []
# an array of headers to apply (Access-Control-Allow-Headers)
#cors-headers: []
# an array of expose headers (Access-Control-Expose-Headers)
#cors-exposed-headers: []
# an array of methods (Access-Control-Allow-Methods)
#cors-methods: []
# the credentials flag (Access-Control-Allow-Credentials)
#cors-credentials: true|false
# the max age (Access-Control-Max-Age)
#cors-max-age: 1h

